<?php
/**
 * DocApi
 * PHP version 5
 *
 * @category Class
 * @package  DocRaptor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocRaptor v1
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * OpenAPI spec version: 1.3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocRaptor;

use \DocRaptor\ApiClient;
use \DocRaptor\ApiException;
use \DocRaptor\Configuration;
use \DocRaptor\ObjectSerializer;

/**
 * DocApi Class Doc Comment
 *
 * @category Class
 * @package  DocRaptor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocApi
{
    /**
     * API Client
     *
     * @var \DocRaptor\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DocRaptor\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DocRaptor\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DocRaptor\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DocRaptor\ApiClient $apiClient set the API client
     *
     * @return DocApi
     */
    public function setApiClient(\DocRaptor\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createAsyncDoc
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return \DocRaptor\AsyncDoc
     */
    public function createAsyncDoc($doc)
    {
        list($response) = $this->createAsyncDocWithHttpInfo($doc);
        return $response;
    }

    /**
     * Operation createAsyncDocWithHttpInfo
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return array of \DocRaptor\AsyncDoc, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAsyncDocWithHttpInfo($doc)
    {
        // verify the required parameter 'doc' is set
        if ($doc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $doc when calling createAsyncDoc');
        }
        // parse inputs
        $resourcePath = "/async_docs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // body params
        $_tempBody = null;
        if (isset($doc)) {
            $_tempBody = $doc;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocRaptor\AsyncDoc',
                '/async_docs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocRaptor\AsyncDoc', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocRaptor\AsyncDoc', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createDoc
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return string
     */
    public function createDoc($doc)
    {
        list($response) = $this->createDocWithHttpInfo($doc);
        return $response;
    }

    /**
     * Operation createDocWithHttpInfo
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocWithHttpInfo($doc)
    {
        // verify the required parameter 'doc' is set
        if ($doc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $doc when calling createDoc');
        }
        // parse inputs
        $resourcePath = "/docs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // body params
        $_tempBody = null;
        if (isset($doc)) {
            $_tempBody = $doc;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/docs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAsyncDoc
     *
     * @param string $id The download_id returned from status request or a callback. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return string
     */
    public function getAsyncDoc($id)
    {
        list($response) = $this->getAsyncDocWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAsyncDocWithHttpInfo
     *
     * @param string $id The download_id returned from status request or a callback. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAsyncDocWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAsyncDoc');
        }
        // parse inputs
        $resourcePath = "/download/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/download/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAsyncDocStatus
     *
     * @param string $id The status_id returned when creating an asynchronous document. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return \DocRaptor\AsyncDocStatus
     */
    public function getAsyncDocStatus($id)
    {
        list($response) = $this->getAsyncDocStatusWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAsyncDocStatusWithHttpInfo
     *
     * @param string $id The status_id returned when creating an asynchronous document. (required)
     * @throws \DocRaptor\ApiException on non-2xx response
     * @return array of \DocRaptor\AsyncDocStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAsyncDocStatusWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAsyncDocStatus');
        }
        // parse inputs
        $resourcePath = "/status/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocRaptor\AsyncDocStatus',
                '/status/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocRaptor\AsyncDocStatus', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocRaptor\AsyncDocStatus', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
