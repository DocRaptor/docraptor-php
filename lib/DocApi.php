<?php
/**
 * DocApi
 * PHP version 5
 *
 * @category Class
 * @package  DocRaptor
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocRaptor;

use \DocRaptor\Configuration;
use \DocRaptor\ApiClient;
use \DocRaptor\ApiException;
use \DocRaptor\ObjectSerializer;

/**
 * DocApi Class Doc Comment
 *
 * @category Class
 * @package  DocRaptor
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocApi
{

    /**
     * API Client
     * @var \DocRaptor\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \DocRaptor\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://docraptor.com/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \DocRaptor\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \DocRaptor\ApiClient $apiClient set the API client
     * @return DocApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * createAsyncDoc
     *
     *
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @return \DocRaptor\AsyncDoc
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function createAsyncDoc($doc)
    {
        list($response, $statusCode, $httpHeader) = $this->createAsyncDocWithHttpInfo ($doc);
        return $response;
    }


    /**
     * createAsyncDocWithHttpInfo
     *
     *
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @return Array of \DocRaptor\AsyncDoc, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function createAsyncDocWithHttpInfo($doc)
    {

        // verify the required parameter 'doc' is set
        if ($doc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $doc when calling createAsyncDoc');
        }

        // parse inputs
        $resourcePath = "/async_docs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());




        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // body params
        $_tempBody = null;
        if (isset($doc)) {
            $_tempBody = $doc;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\DocRaptor\AsyncDoc'
            );

            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocRaptor\ObjectSerializer::deserialize($response, '\DocRaptor\AsyncDoc', $httpHeader), $statusCode, $httpHeader);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            case 200:
                $data = \DocRaptor\ObjectSerializer::deserialize($e->getResponseBody(), '\DocRaptor\AsyncDoc', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }

            throw $e;
        }
    }

    /**
     * createDoc
     *
     *
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @return string
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function createDoc($doc)
    {
        list($response, $statusCode, $httpHeader) = $this->createDocWithHttpInfo ($doc);
        return $response;
    }


    /**
     * createDocWithHttpInfo
     *
     *
     *
     * @param \DocRaptor\Doc $doc The document to be created. (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function createDocWithHttpInfo($doc)
    {

        // verify the required parameter 'doc' is set
        if ($doc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $doc when calling createDoc');
        }

        // parse inputs
        $resourcePath = "/docs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());




        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // body params
        $_tempBody = null;
        if (isset($doc)) {
            $_tempBody = $doc;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );

            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocRaptor\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            case 200:
                $data = \DocRaptor\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }

            throw $e;
        }
    }

    /**
     * getAsyncDoc
     *
     *
     *
     * @param string $id The download_id returned from status request or a callback. (required)
     * @return string
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function getAsyncDoc($id)
    {
        list($response, $statusCode, $httpHeader) = $this->getAsyncDocWithHttpInfo ($id);
        return $response;
    }


    /**
     * getAsyncDocWithHttpInfo
     *
     *
     *
     * @param string $id The download_id returned from status request or a callback. (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function getAsyncDocWithHttpInfo($id)
    {

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAsyncDoc');
        }

        // parse inputs
        $resourcePath = "/download/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params

        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);




        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );

            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocRaptor\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            case 200:
                $data = \DocRaptor\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }

            throw $e;
        }
    }

    /**
     * getAsyncDocStatus
     *
     *
     *
     * @param string $id The status_id returned when creating an asynchronous document. (required)
     * @return \DocRaptor\AsyncDocStatus
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function getAsyncDocStatus($id)
    {
        list($response, $statusCode, $httpHeader) = $this->getAsyncDocStatusWithHttpInfo ($id);
        return $response;
    }


    /**
     * getAsyncDocStatusWithHttpInfo
     *
     *
     *
     * @param string $id The status_id returned when creating an asynchronous document. (required)
     * @return Array of \DocRaptor\AsyncDocStatus, HTTP status code, HTTP response headers (array of strings)
     * @throws \DocRaptor\ApiException on non-2xx response
     */
    public function getAsyncDocStatusWithHttpInfo($id)
    {

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAsyncDocStatus');
        }

        // parse inputs
        $resourcePath = "/status/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params

        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);




        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\DocRaptor\AsyncDocStatus'
            );

            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\DocRaptor\ObjectSerializer::deserialize($response, '\DocRaptor\AsyncDocStatus', $httpHeader), $statusCode, $httpHeader);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            case 200:
                $data = \DocRaptor\ObjectSerializer::deserialize($e->getResponseBody(), '\DocRaptor\AsyncDocStatus', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }

            throw $e;
        }
    }

}
