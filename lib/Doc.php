<?php
/**
 * Doc
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocRaptor
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocRaptor
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocRaptor;

use \ArrayAccess;
use \DocRaptor\ObjectSerializer;

/**
 * Doc Class Doc Comment
 *
 * @category Class
 * @package  DocRaptor
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Doc implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Doc';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'document_type' => 'string',
        'document_content' => 'string',
        'document_url' => 'string',
        'test' => 'bool',
        'pipeline' => 'string',
        'strict' => 'string',
        'ignore_resource_errors' => 'bool',
        'ignore_console_messages' => 'bool',
        'tag' => 'string',
        'help' => 'bool',
        'javascript' => 'bool',
        'referrer' => 'string',
        'callback_url' => 'string',
        'hosted_download_limit' => 'int',
        'hosted_expires_at' => 'string',
        'prince_options' => '\DocRaptor\PrinceOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'document_type' => null,
        'document_content' => null,
        'document_url' => null,
        'test' => null,
        'pipeline' => null,
        'strict' => null,
        'ignore_resource_errors' => null,
        'ignore_console_messages' => null,
        'tag' => null,
        'help' => null,
        'javascript' => null,
        'referrer' => null,
        'callback_url' => null,
        'hosted_download_limit' => null,
        'hosted_expires_at' => null,
        'prince_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'document_type' => 'document_type',
        'document_content' => 'document_content',
        'document_url' => 'document_url',
        'test' => 'test',
        'pipeline' => 'pipeline',
        'strict' => 'strict',
        'ignore_resource_errors' => 'ignore_resource_errors',
        'ignore_console_messages' => 'ignore_console_messages',
        'tag' => 'tag',
        'help' => 'help',
        'javascript' => 'javascript',
        'referrer' => 'referrer',
        'callback_url' => 'callback_url',
        'hosted_download_limit' => 'hosted_download_limit',
        'hosted_expires_at' => 'hosted_expires_at',
        'prince_options' => 'prince_options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'document_type' => 'setDocumentType',
        'document_content' => 'setDocumentContent',
        'document_url' => 'setDocumentUrl',
        'test' => 'setTest',
        'pipeline' => 'setPipeline',
        'strict' => 'setStrict',
        'ignore_resource_errors' => 'setIgnoreResourceErrors',
        'ignore_console_messages' => 'setIgnoreConsoleMessages',
        'tag' => 'setTag',
        'help' => 'setHelp',
        'javascript' => 'setJavascript',
        'referrer' => 'setReferrer',
        'callback_url' => 'setCallbackUrl',
        'hosted_download_limit' => 'setHostedDownloadLimit',
        'hosted_expires_at' => 'setHostedExpiresAt',
        'prince_options' => 'setPrinceOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'document_type' => 'getDocumentType',
        'document_content' => 'getDocumentContent',
        'document_url' => 'getDocumentUrl',
        'test' => 'getTest',
        'pipeline' => 'getPipeline',
        'strict' => 'getStrict',
        'ignore_resource_errors' => 'getIgnoreResourceErrors',
        'ignore_console_messages' => 'getIgnoreConsoleMessages',
        'tag' => 'getTag',
        'help' => 'getHelp',
        'javascript' => 'getJavascript',
        'referrer' => 'getReferrer',
        'callback_url' => 'getCallbackUrl',
        'hosted_download_limit' => 'getHostedDownloadLimit',
        'hosted_expires_at' => 'getHostedExpiresAt',
        'prince_options' => 'getPrinceOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_TYPE_PDF = 'pdf';
    public const DOCUMENT_TYPE_XLS = 'xls';
    public const DOCUMENT_TYPE_XLSX = 'xlsx';
    public const STRICT_NONE = 'none';
    public const STRICT_HTML = 'html';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_PDF,
            self::DOCUMENT_TYPE_XLS,
            self::DOCUMENT_TYPE_XLSX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrictAllowableValues()
    {
        return [
            self::STRICT_NONE,
            self::STRICT_HTML,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['document_type'] = $data['document_type'] ?? null;
        $this->container['document_content'] = $data['document_content'] ?? null;
        $this->container['document_url'] = $data['document_url'] ?? null;
        $this->container['test'] = $data['test'] ?? true;
        $this->container['pipeline'] = $data['pipeline'] ?? null;
        $this->container['strict'] = $data['strict'] ?? null;
        $this->container['ignore_resource_errors'] = $data['ignore_resource_errors'] ?? true;
        $this->container['ignore_console_messages'] = $data['ignore_console_messages'] ?? false;
        $this->container['tag'] = $data['tag'] ?? null;
        $this->container['help'] = $data['help'] ?? false;
        $this->container['javascript'] = $data['javascript'] ?? false;
        $this->container['referrer'] = $data['referrer'] ?? null;
        $this->container['callback_url'] = $data['callback_url'] ?? null;
        $this->container['hosted_download_limit'] = $data['hosted_download_limit'] ?? null;
        $this->container['hosted_expires_at'] = $data['hosted_expires_at'] ?? null;
        $this->container['prince_options'] = $data['prince_options'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_type', must be one of '%s'",
                $this->container['document_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['document_content'] === null) {
            $invalidProperties[] = "'document_content' can't be null";
        }
        $allowedValues = $this->getStrictAllowableValues();
        if (!is_null($this->container['strict']) && !in_array($this->container['strict'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strict', must be one of '%s'",
                $this->container['strict'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A name for identifying your document.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type The type of document being created.
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_type', must be one of '%s'",
                    $document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_content
     *
     * @return string
     */
    public function getDocumentContent()
    {
        return $this->container['document_content'];
    }

    /**
     * Sets document_content
     *
     * @param string $document_content The HTML data to be transformed into a document. You must supply content using document_content or document_url.
     *
     * @return self
     */
    public function setDocumentContent($document_content)
    {
        $this->container['document_content'] = $document_content;

        return $this;
    }

    /**
     * Gets document_url
     *
     * @return string|null
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     *
     * @param string|null $document_url The URL to fetch the HTML data to be transformed into a document. You must supply content using document_content or document_url.
     *
     * @return self
     */
    public function setDocumentUrl($document_url)
    {
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool|null
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool|null $test Enable test mode for this document. Test documents are not charged for but include a watermark.
     *
     * @return self
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets pipeline
     *
     * @return string|null
     */
    public function getPipeline()
    {
        return $this->container['pipeline'];
    }

    /**
     * Sets pipeline
     *
     * @param string|null $pipeline Specify a specific verison of the DocRaptor Pipeline to use.
     *
     * @return self
     */
    public function setPipeline($pipeline)
    {
        $this->container['pipeline'] = $pipeline;

        return $this;
    }

    /**
     * Gets strict
     *
     * @return string|null
     */
    public function getStrict()
    {
        return $this->container['strict'];
    }

    /**
     * Sets strict
     *
     * @param string|null $strict Force strict HTML validation.
     *
     * @return self
     */
    public function setStrict($strict)
    {
        $allowedValues = $this->getStrictAllowableValues();
        if (!is_null($strict) && !in_array($strict, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strict', must be one of '%s'",
                    $strict,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strict'] = $strict;

        return $this;
    }

    /**
     * Gets ignore_resource_errors
     *
     * @return bool|null
     */
    public function getIgnoreResourceErrors()
    {
        return $this->container['ignore_resource_errors'];
    }

    /**
     * Sets ignore_resource_errors
     *
     * @param bool|null $ignore_resource_errors Failed loading of images/javascripts/stylesheets/etc. will not cause the rendering to stop.
     *
     * @return self
     */
    public function setIgnoreResourceErrors($ignore_resource_errors)
    {
        $this->container['ignore_resource_errors'] = $ignore_resource_errors;

        return $this;
    }

    /**
     * Gets ignore_console_messages
     *
     * @return bool|null
     */
    public function getIgnoreConsoleMessages()
    {
        return $this->container['ignore_console_messages'];
    }

    /**
     * Sets ignore_console_messages
     *
     * @param bool|null $ignore_console_messages Prevent console.log from stopping document rendering during JavaScript execution.
     *
     * @return self
     */
    public function setIgnoreConsoleMessages($ignore_console_messages)
    {
        $this->container['ignore_console_messages'] = $ignore_console_messages;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag A field for storing a small amount of metadata with this document.
     *
     * @return self
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets help
     *
     * @return bool|null
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param bool|null $help Request support help with this request if it succeeds.
     *
     * @return self
     */
    public function setHelp($help)
    {
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets javascript
     *
     * @return bool|null
     */
    public function getJavascript()
    {
        return $this->container['javascript'];
    }

    /**
     * Sets javascript
     *
     * @param bool|null $javascript Enable DocRaptor JavaScript parsing. PrinceXML JavaScript parsing is also available elsewhere.
     *
     * @return self
     */
    public function setJavascript($javascript)
    {
        $this->container['javascript'] = $javascript;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return string|null
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param string|null $referrer Set HTTP referrer when generating this document.
     *
     * @return self
     */
    public function setReferrer($referrer)
    {
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url A URL that will receive a POST request after successfully completing an asynchronous document. The POST data will include download_url and download_id similar to status API responses. WARNING: this only works on asynchronous documents.
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets hosted_download_limit
     *
     * @return int|null
     */
    public function getHostedDownloadLimit()
    {
        return $this->container['hosted_download_limit'];
    }

    /**
     * Sets hosted_download_limit
     *
     * @param int|null $hosted_download_limit The number of times a hosted document can be downloaded.  If no limit is specified, the document will be available for an unlimited number of downloads.
     *
     * @return self
     */
    public function setHostedDownloadLimit($hosted_download_limit)
    {
        $this->container['hosted_download_limit'] = $hosted_download_limit;

        return $this;
    }

    /**
     * Gets hosted_expires_at
     *
     * @return string|null
     */
    public function getHostedExpiresAt()
    {
        return $this->container['hosted_expires_at'];
    }

    /**
     * Sets hosted_expires_at
     *
     * @param string|null $hosted_expires_at The date and time at which a hosted document will be removed and no longer available. Must be a properly formatted ISO 8601 datetime, like 1981-01-23T08:02:30-05:00.
     *
     * @return self
     */
    public function setHostedExpiresAt($hosted_expires_at)
    {
        $this->container['hosted_expires_at'] = $hosted_expires_at;

        return $this;
    }

    /**
     * Gets prince_options
     *
     * @return \DocRaptor\PrinceOptions|null
     */
    public function getPrinceOptions()
    {
        return $this->container['prince_options'];
    }

    /**
     * Sets prince_options
     *
     * @param \DocRaptor\PrinceOptions|null $prince_options prince_options
     *
     * @return self
     */
    public function setPrinceOptions($prince_options)
    {
        $this->container['prince_options'] = $prince_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


