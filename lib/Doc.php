<?php
/**
 * Doc
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocRaptor
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocRaptor v1
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * OpenAPI spec version: 1.3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocRaptor;

use \ArrayAccess;

/**
 * Doc Class Doc Comment
 *
 * @category    Class
 * @package     DocRaptor
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Doc implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Doc';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pipeline' => 'string',
        'name' => 'string',
        'document_type' => 'string',
        'document_content' => 'string',
        'document_url' => 'string',
        'test' => 'bool',
        'strict' => 'string',
        'ignore_resource_errors' => 'bool',
        'ignore_console_messages' => 'bool',
        'tag' => 'string',
        'help' => 'bool',
        'javascript' => 'bool',
        'referrer' => 'string',
        'callback_url' => 'string',
        'prince_options' => '\DocRaptor\PrinceOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pipeline' => null,
        'name' => null,
        'document_type' => null,
        'document_content' => null,
        'document_url' => null,
        'test' => null,
        'strict' => null,
        'ignore_resource_errors' => null,
        'ignore_console_messages' => null,
        'tag' => null,
        'help' => null,
        'javascript' => null,
        'referrer' => null,
        'callback_url' => null,
        'prince_options' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'pipeline' => 'pipeline',
        'name' => 'name',
        'document_type' => 'document_type',
        'document_content' => 'document_content',
        'document_url' => 'document_url',
        'test' => 'test',
        'strict' => 'strict',
        'ignore_resource_errors' => 'ignore_resource_errors',
        'ignore_console_messages' => 'ignore_console_messages',
        'tag' => 'tag',
        'help' => 'help',
        'javascript' => 'javascript',
        'referrer' => 'referrer',
        'callback_url' => 'callback_url',
        'prince_options' => 'prince_options'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'pipeline' => 'setPipeline',
        'name' => 'setName',
        'document_type' => 'setDocumentType',
        'document_content' => 'setDocumentContent',
        'document_url' => 'setDocumentUrl',
        'test' => 'setTest',
        'strict' => 'setStrict',
        'ignore_resource_errors' => 'setIgnoreResourceErrors',
        'ignore_console_messages' => 'setIgnoreConsoleMessages',
        'tag' => 'setTag',
        'help' => 'setHelp',
        'javascript' => 'setJavascript',
        'referrer' => 'setReferrer',
        'callback_url' => 'setCallbackUrl',
        'prince_options' => 'setPrinceOptions'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'pipeline' => 'getPipeline',
        'name' => 'getName',
        'document_type' => 'getDocumentType',
        'document_content' => 'getDocumentContent',
        'document_url' => 'getDocumentUrl',
        'test' => 'getTest',
        'strict' => 'getStrict',
        'ignore_resource_errors' => 'getIgnoreResourceErrors',
        'ignore_console_messages' => 'getIgnoreConsoleMessages',
        'tag' => 'getTag',
        'help' => 'getHelp',
        'javascript' => 'getJavascript',
        'referrer' => 'getReferrer',
        'callback_url' => 'getCallbackUrl',
        'prince_options' => 'getPrinceOptions'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DOCUMENT_TYPE_PDF = 'pdf';
    const DOCUMENT_TYPE_XLS = 'xls';
    const DOCUMENT_TYPE_XLSX = 'xlsx';
    const STRICT_NONE = 'none';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_PDF,
            self::DOCUMENT_TYPE_XLS,
            self::DOCUMENT_TYPE_XLSX,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStrictAllowableValues()
    {
        return [
            self::STRICT_NONE,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pipeline'] = isset($data['pipeline']) ? $data['pipeline'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_content'] = isset($data['document_content']) ? $data['document_content'] : null;
        $this->container['document_url'] = isset($data['document_url']) ? $data['document_url'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : true;
        $this->container['strict'] = isset($data['strict']) ? $data['strict'] : 'none';
        $this->container['ignore_resource_errors'] = isset($data['ignore_resource_errors']) ? $data['ignore_resource_errors'] : true;
        $this->container['ignore_console_messages'] = isset($data['ignore_console_messages']) ? $data['ignore_console_messages'] : false;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['help'] = isset($data['help']) ? $data['help'] : false;
        $this->container['javascript'] = isset($data['javascript']) ? $data['javascript'] : false;
        $this->container['referrer'] = isset($data['referrer']) ? $data['referrer'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['prince_options'] = isset($data['prince_options']) ? $data['prince_options'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalid_properties[] = "'document_type' can't be null";
        }
        $allowed_values = $this->getDocumentTypeAllowableValues();
        if (!in_array($this->container['document_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['document_content'] === null) {
            $invalid_properties[] = "'document_content' can't be null";
        }
        $allowed_values = $this->getStrictAllowableValues();
        if (!in_array($this->container['strict'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'strict', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['document_type'] === null) {
            return false;
        }
        $allowed_values = $this->getDocumentTypeAllowableValues();
        if (!in_array($this->container['document_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['document_content'] === null) {
            return false;
        }
        $allowed_values = $this->getStrictAllowableValues();
        if (!in_array($this->container['strict'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets pipeline
     * @return string
     */
    public function getPipeline()
    {
        return $this->container['pipeline'];
    }

    /**
     * Sets pipeline
     * @param string $pipeline Specify a specific verison of the DocRaptor Pipeline to use.
     * @return $this
     */
    public function setPipeline($pipeline)
    {
        $this->container['pipeline'] = $pipeline;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name A name for identifying your document.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets document_type
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     * @param string $document_type The type of document being created.
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowed_values = $this->getDocumentTypeAllowableValues();
        if (!in_array($document_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_content
     * @return string
     */
    public function getDocumentContent()
    {
        return $this->container['document_content'];
    }

    /**
     * Sets document_content
     * @param string $document_content The HTML data to be transformed into a document. You must supply content using document_content or document_url.
     * @return $this
     */
    public function setDocumentContent($document_content)
    {
        $this->container['document_content'] = $document_content;

        return $this;
    }

    /**
     * Gets document_url
     * @return string
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     * @param string $document_url The URL to fetch the HTML data to be transformed into a document. You must supply content using document_content or document_url.
     * @return $this
     */
    public function setDocumentUrl($document_url)
    {
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets test
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     * @param bool $test Enable test mode for this document. Test documents are not charged for but include a watermark.
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets strict
     * @return string
     */
    public function getStrict()
    {
        return $this->container['strict'];
    }

    /**
     * Sets strict
     * @param string $strict Force strict HTML validation.
     * @return $this
     */
    public function setStrict($strict)
    {
        $allowed_values = $this->getStrictAllowableValues();
        if (!is_null($strict) && !in_array($strict, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'strict', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['strict'] = $strict;

        return $this;
    }

    /**
     * Gets ignore_resource_errors
     * @return bool
     */
    public function getIgnoreResourceErrors()
    {
        return $this->container['ignore_resource_errors'];
    }

    /**
     * Sets ignore_resource_errors
     * @param bool $ignore_resource_errors Failed loading of images/javascripts/stylesheets/etc. will not cause the rendering to stop.
     * @return $this
     */
    public function setIgnoreResourceErrors($ignore_resource_errors)
    {
        $this->container['ignore_resource_errors'] = $ignore_resource_errors;

        return $this;
    }

    /**
     * Gets ignore_console_messages
     * @return bool
     */
    public function getIgnoreConsoleMessages()
    {
        return $this->container['ignore_console_messages'];
    }

    /**
     * Sets ignore_console_messages
     * @param bool $ignore_console_messages Prevent console.log from stopping document rendering during JavaScript execution.
     * @return $this
     */
    public function setIgnoreConsoleMessages($ignore_console_messages)
    {
        $this->container['ignore_console_messages'] = $ignore_console_messages;

        return $this;
    }

    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag A field for storing a small amount of metadata with this document.
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets help
     * @return bool
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     * @param bool $help Request support help with this request if it succeeds.
     * @return $this
     */
    public function setHelp($help)
    {
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets javascript
     * @return bool
     */
    public function getJavascript()
    {
        return $this->container['javascript'];
    }

    /**
     * Sets javascript
     * @param bool $javascript Enable DocRaptor JavaScript parsing. PrinceXML JavaScript parsing is also available elsewhere.
     * @return $this
     */
    public function setJavascript($javascript)
    {
        $this->container['javascript'] = $javascript;

        return $this;
    }

    /**
     * Gets referrer
     * @return string
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     * @param string $referrer Set HTTP referrer when generating this document.
     * @return $this
     */
    public function setReferrer($referrer)
    {
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets callback_url
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     * @param string $callback_url A URL that will receive a POST request after successfully completing an asynchronous document. The POST data will include download_url and download_id similar to status api responses. WARNING: this only works on asynchronous documents.
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets prince_options
     * @return \DocRaptor\PrinceOptions
     */
    public function getPrinceOptions()
    {
        return $this->container['prince_options'];
    }

    /**
     * Sets prince_options
     * @param \DocRaptor\PrinceOptions $prince_options
     * @return $this
     */
    public function setPrinceOptions($prince_options)
    {
        $this->container['prince_options'] = $prince_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DocRaptor\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DocRaptor\ObjectSerializer::sanitizeForSerialization($this));
    }
}


