<?php
/**
 * PrinceOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocRaptor
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocRaptor;

use \ArrayAccess;
/**
 * PrinceOptions Class Doc Comment
 *
 * @category    Class
 * @description
 * @package     DocRaptor
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PrinceOptions implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    static $swaggerTypes = array(
        'baseurl' => 'string',
        'no_xinclude' => 'bool',
        'no_network' => 'bool',
        'http_user' => 'string',
        'http_password' => 'string',
        'http_proxy' => 'string',
        'http_timeout' => 'int',
        'insecure' => 'bool',
        'media' => 'string',
        'no_author_style' => 'bool',
        'no_default_style' => 'bool',
        'no_embed_fonts' => 'bool',
        'no_subset_fonts' => 'bool',
        'no_compress' => 'bool',
        'encrypt' => 'bool',
        'key_bits' => 'int',
        'user_password' => 'string',
        'owner_password' => 'string',
        'disallow_print' => 'bool',
        'disallow_copy' => 'bool',
        'disallow_annotate' => 'bool',
        'disallow_modify' => 'bool',
        'debug' => 'bool',
        'input' => 'string',
        'version' => 'string',
        'javascript' => 'bool',
        'css_dpi' => 'int',
        'profile' => 'string'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[]
      */
    static $attributeMap = array(
        'baseurl' => 'baseurl',
        'no_xinclude' => 'no_xinclude',
        'no_network' => 'no_network',
        'http_user' => 'http_user',
        'http_password' => 'http_password',
        'http_proxy' => 'http_proxy',
        'http_timeout' => 'http_timeout',
        'insecure' => 'insecure',
        'media' => 'media',
        'no_author_style' => 'no_author_style',
        'no_default_style' => 'no_default_style',
        'no_embed_fonts' => 'no_embed_fonts',
        'no_subset_fonts' => 'no_subset_fonts',
        'no_compress' => 'no_compress',
        'encrypt' => 'encrypt',
        'key_bits' => 'key_bits',
        'user_password' => 'user_password',
        'owner_password' => 'owner_password',
        'disallow_print' => 'disallow_print',
        'disallow_copy' => 'disallow_copy',
        'disallow_annotate' => 'disallow_annotate',
        'disallow_modify' => 'disallow_modify',
        'debug' => 'debug',
        'input' => 'input',
        'version' => 'version',
        'javascript' => 'javascript',
        'css_dpi' => 'css_dpi',
        'profile' => 'profile'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'baseurl' => 'setBaseurl',
        'no_xinclude' => 'setNoXinclude',
        'no_network' => 'setNoNetwork',
        'http_user' => 'setHttpUser',
        'http_password' => 'setHttpPassword',
        'http_proxy' => 'setHttpProxy',
        'http_timeout' => 'setHttpTimeout',
        'insecure' => 'setInsecure',
        'media' => 'setMedia',
        'no_author_style' => 'setNoAuthorStyle',
        'no_default_style' => 'setNoDefaultStyle',
        'no_embed_fonts' => 'setNoEmbedFonts',
        'no_subset_fonts' => 'setNoSubsetFonts',
        'no_compress' => 'setNoCompress',
        'encrypt' => 'setEncrypt',
        'key_bits' => 'setKeyBits',
        'user_password' => 'setUserPassword',
        'owner_password' => 'setOwnerPassword',
        'disallow_print' => 'setDisallowPrint',
        'disallow_copy' => 'setDisallowCopy',
        'disallow_annotate' => 'setDisallowAnnotate',
        'disallow_modify' => 'setDisallowModify',
        'debug' => 'setDebug',
        'input' => 'setInput',
        'version' => 'setVersion',
        'javascript' => 'setJavascript',
        'css_dpi' => 'setCssDpi',
        'profile' => 'setProfile'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'baseurl' => 'getBaseurl',
        'no_xinclude' => 'getNoXinclude',
        'no_network' => 'getNoNetwork',
        'http_user' => 'getHttpUser',
        'http_password' => 'getHttpPassword',
        'http_proxy' => 'getHttpProxy',
        'http_timeout' => 'getHttpTimeout',
        'insecure' => 'getInsecure',
        'media' => 'getMedia',
        'no_author_style' => 'getNoAuthorStyle',
        'no_default_style' => 'getNoDefaultStyle',
        'no_embed_fonts' => 'getNoEmbedFonts',
        'no_subset_fonts' => 'getNoSubsetFonts',
        'no_compress' => 'getNoCompress',
        'encrypt' => 'getEncrypt',
        'key_bits' => 'getKeyBits',
        'user_password' => 'getUserPassword',
        'owner_password' => 'getOwnerPassword',
        'disallow_print' => 'getDisallowPrint',
        'disallow_copy' => 'getDisallowCopy',
        'disallow_annotate' => 'getDisallowAnnotate',
        'disallow_modify' => 'getDisallowModify',
        'debug' => 'getDebug',
        'input' => 'getInput',
        'version' => 'getVersion',
        'javascript' => 'getJavascript',
        'css_dpi' => 'getCssDpi',
        'profile' => 'getProfile'
    );


    /**
      * $baseurl Set the baseurl for assets.
      * @var string
      */
    protected $baseurl;

    /**
      * $no_xinclude Disable XML inclusion.
      * @var bool
      */
    protected $no_xinclude;

    /**
      * $no_network Disable network access.
      * @var bool
      */
    protected $no_network;

    /**
      * $http_user Set the user for HTTP authentication.
      * @var string
      */
    protected $http_user;

    /**
      * $http_password Set the password for HTTP authentication.
      * @var string
      */
    protected $http_password;

    /**
      * $http_proxy Set the HTTP proxy server.
      * @var string
      */
    protected $http_proxy;

    /**
      * $http_timeout Set the HTTP request timeout.
      * @var int
      */
    protected $http_timeout;

    /**
      * $insecure Disable SSL verification.
      * @var bool
      */
    protected $insecure;

    /**
      * $media Specify the CSS media type. Defaults to \"print\" but you may want to use \"screen\" for web styles.
      * @var string
      */
    protected $media = 'print';

    /**
      * $no_author_style Ignore author stylesheets.
      * @var bool
      */
    protected $no_author_style;

    /**
      * $no_default_style Ignore default stylesheets.
      * @var bool
      */
    protected $no_default_style;

    /**
      * $no_embed_fonts Disable font embedding in PDFs.
      * @var bool
      */
    protected $no_embed_fonts;

    /**
      * $no_subset_fonts Disable font subsetting in PDFs.
      * @var bool
      */
    protected $no_subset_fonts;

    /**
      * $no_compress Disable PDF compression.
      * @var bool
      */
    protected $no_compress;

    /**
      * $encrypt Encrypt PDF output.
      * @var bool
      */
    protected $encrypt;

    /**
      * $key_bits Set encryption key size.
      * @var int
      */
    protected $key_bits;

    /**
      * $user_password Set the PDF user password.
      * @var string
      */
    protected $user_password;

    /**
      * $owner_password Set the PDF owner password.
      * @var string
      */
    protected $owner_password;

    /**
      * $disallow_print Disallow printing of this PDF.
      * @var bool
      */
    protected $disallow_print;

    /**
      * $disallow_copy Disallow copying of this PDF.
      * @var bool
      */
    protected $disallow_copy;

    /**
      * $disallow_annotate Disallow annotation of this PDF.
      * @var bool
      */
    protected $disallow_annotate;

    /**
      * $disallow_modify Disallow modification of this PDF.
      * @var bool
      */
    protected $disallow_modify;

    /**
      * $debug Enable Prince debug mode.
      * @var bool
      */
    protected $debug;

    /**
      * $input Specify the input format.
      * @var string
      */
    protected $input = 'html';

    /**
      * $version Specify a specific verison of PrinceXML to use.
      * @var string
      */
    protected $version;

    /**
      * $javascript Enable PrinceXML JavaScript. DocRaptor JavaScript parsing is also available elsewhere.
      * @var bool
      */
    protected $javascript;

    /**
      * $css_dpi Set the DPI when rendering CSS. Defaults to 96 but can be set with Prince 9.0 and up.
      * @var int
      */
    protected $css_dpi;

    /**
      * $profile In Prince 9.0 and up you can set the PDF profile.
      * @var string
      */
    protected $profile;


    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->baseurl = $data["baseurl"];
            $this->no_xinclude = $data["no_xinclude"];
            $this->no_network = $data["no_network"];
            $this->http_user = $data["http_user"];
            $this->http_password = $data["http_password"];
            $this->http_proxy = $data["http_proxy"];
            $this->http_timeout = $data["http_timeout"];
            $this->insecure = $data["insecure"];
            $this->media = $data["media"];
            $this->no_author_style = $data["no_author_style"];
            $this->no_default_style = $data["no_default_style"];
            $this->no_embed_fonts = $data["no_embed_fonts"];
            $this->no_subset_fonts = $data["no_subset_fonts"];
            $this->no_compress = $data["no_compress"];
            $this->encrypt = $data["encrypt"];
            $this->key_bits = $data["key_bits"];
            $this->user_password = $data["user_password"];
            $this->owner_password = $data["owner_password"];
            $this->disallow_print = $data["disallow_print"];
            $this->disallow_copy = $data["disallow_copy"];
            $this->disallow_annotate = $data["disallow_annotate"];
            $this->disallow_modify = $data["disallow_modify"];
            $this->debug = $data["debug"];
            $this->input = $data["input"];
            $this->version = $data["version"];
            $this->javascript = $data["javascript"];
            $this->css_dpi = $data["css_dpi"];
            $this->profile = $data["profile"];
        }
    }

    /**
     * Gets baseurl
     * @return string
     */
    public function getBaseurl()
    {
        return $this->baseurl;
    }

    /**
     * Sets baseurl
     * @param string $baseurl Set the baseurl for assets.
     * @return $this
     */
    public function setBaseurl($baseurl)
    {

        $this->baseurl = $baseurl;
        return $this;
    }

    /**
     * Gets no_xinclude
     * @return bool
     */
    public function getNoXinclude()
    {
        return $this->no_xinclude;
    }

    /**
     * Sets no_xinclude
     * @param bool $no_xinclude Disable XML inclusion.
     * @return $this
     */
    public function setNoXinclude($no_xinclude)
    {

        $this->no_xinclude = $no_xinclude;
        return $this;
    }

    /**
     * Gets no_network
     * @return bool
     */
    public function getNoNetwork()
    {
        return $this->no_network;
    }

    /**
     * Sets no_network
     * @param bool $no_network Disable network access.
     * @return $this
     */
    public function setNoNetwork($no_network)
    {

        $this->no_network = $no_network;
        return $this;
    }

    /**
     * Gets http_user
     * @return string
     */
    public function getHttpUser()
    {
        return $this->http_user;
    }

    /**
     * Sets http_user
     * @param string $http_user Set the user for HTTP authentication.
     * @return $this
     */
    public function setHttpUser($http_user)
    {

        $this->http_user = $http_user;
        return $this;
    }

    /**
     * Gets http_password
     * @return string
     */
    public function getHttpPassword()
    {
        return $this->http_password;
    }

    /**
     * Sets http_password
     * @param string $http_password Set the password for HTTP authentication.
     * @return $this
     */
    public function setHttpPassword($http_password)
    {

        $this->http_password = $http_password;
        return $this;
    }

    /**
     * Gets http_proxy
     * @return string
     */
    public function getHttpProxy()
    {
        return $this->http_proxy;
    }

    /**
     * Sets http_proxy
     * @param string $http_proxy Set the HTTP proxy server.
     * @return $this
     */
    public function setHttpProxy($http_proxy)
    {

        $this->http_proxy = $http_proxy;
        return $this;
    }

    /**
     * Gets http_timeout
     * @return int
     */
    public function getHttpTimeout()
    {
        return $this->http_timeout;
    }

    /**
     * Sets http_timeout
     * @param int $http_timeout Set the HTTP request timeout.
     * @return $this
     */
    public function setHttpTimeout($http_timeout)
    {

        $this->http_timeout = $http_timeout;
        return $this;
    }

    /**
     * Gets insecure
     * @return bool
     */
    public function getInsecure()
    {
        return $this->insecure;
    }

    /**
     * Sets insecure
     * @param bool $insecure Disable SSL verification.
     * @return $this
     */
    public function setInsecure($insecure)
    {

        $this->insecure = $insecure;
        return $this;
    }

    /**
     * Gets media
     * @return string
     */
    public function getMedia()
    {
        return $this->media;
    }

    /**
     * Sets media
     * @param string $media Specify the CSS media type. Defaults to \"print\" but you may want to use \"screen\" for web styles.
     * @return $this
     */
    public function setMedia($media)
    {

        $this->media = $media;
        return $this;
    }

    /**
     * Gets no_author_style
     * @return bool
     */
    public function getNoAuthorStyle()
    {
        return $this->no_author_style;
    }

    /**
     * Sets no_author_style
     * @param bool $no_author_style Ignore author stylesheets.
     * @return $this
     */
    public function setNoAuthorStyle($no_author_style)
    {

        $this->no_author_style = $no_author_style;
        return $this;
    }

    /**
     * Gets no_default_style
     * @return bool
     */
    public function getNoDefaultStyle()
    {
        return $this->no_default_style;
    }

    /**
     * Sets no_default_style
     * @param bool $no_default_style Ignore default stylesheets.
     * @return $this
     */
    public function setNoDefaultStyle($no_default_style)
    {

        $this->no_default_style = $no_default_style;
        return $this;
    }

    /**
     * Gets no_embed_fonts
     * @return bool
     */
    public function getNoEmbedFonts()
    {
        return $this->no_embed_fonts;
    }

    /**
     * Sets no_embed_fonts
     * @param bool $no_embed_fonts Disable font embedding in PDFs.
     * @return $this
     */
    public function setNoEmbedFonts($no_embed_fonts)
    {

        $this->no_embed_fonts = $no_embed_fonts;
        return $this;
    }

    /**
     * Gets no_subset_fonts
     * @return bool
     */
    public function getNoSubsetFonts()
    {
        return $this->no_subset_fonts;
    }

    /**
     * Sets no_subset_fonts
     * @param bool $no_subset_fonts Disable font subsetting in PDFs.
     * @return $this
     */
    public function setNoSubsetFonts($no_subset_fonts)
    {

        $this->no_subset_fonts = $no_subset_fonts;
        return $this;
    }

    /**
     * Gets no_compress
     * @return bool
     */
    public function getNoCompress()
    {
        return $this->no_compress;
    }

    /**
     * Sets no_compress
     * @param bool $no_compress Disable PDF compression.
     * @return $this
     */
    public function setNoCompress($no_compress)
    {

        $this->no_compress = $no_compress;
        return $this;
    }

    /**
     * Gets encrypt
     * @return bool
     */
    public function getEncrypt()
    {
        return $this->encrypt;
    }

    /**
     * Sets encrypt
     * @param bool $encrypt Encrypt PDF output.
     * @return $this
     */
    public function setEncrypt($encrypt)
    {

        $this->encrypt = $encrypt;
        return $this;
    }

    /**
     * Gets key_bits
     * @return int
     */
    public function getKeyBits()
    {
        return $this->key_bits;
    }

    /**
     * Sets key_bits
     * @param int $key_bits Set encryption key size.
     * @return $this
     */
    public function setKeyBits($key_bits)
    {

        $this->key_bits = $key_bits;
        return $this;
    }

    /**
     * Gets user_password
     * @return string
     */
    public function getUserPassword()
    {
        return $this->user_password;
    }

    /**
     * Sets user_password
     * @param string $user_password Set the PDF user password.
     * @return $this
     */
    public function setUserPassword($user_password)
    {

        $this->user_password = $user_password;
        return $this;
    }

    /**
     * Gets owner_password
     * @return string
     */
    public function getOwnerPassword()
    {
        return $this->owner_password;
    }

    /**
     * Sets owner_password
     * @param string $owner_password Set the PDF owner password.
     * @return $this
     */
    public function setOwnerPassword($owner_password)
    {

        $this->owner_password = $owner_password;
        return $this;
    }

    /**
     * Gets disallow_print
     * @return bool
     */
    public function getDisallowPrint()
    {
        return $this->disallow_print;
    }

    /**
     * Sets disallow_print
     * @param bool $disallow_print Disallow printing of this PDF.
     * @return $this
     */
    public function setDisallowPrint($disallow_print)
    {

        $this->disallow_print = $disallow_print;
        return $this;
    }

    /**
     * Gets disallow_copy
     * @return bool
     */
    public function getDisallowCopy()
    {
        return $this->disallow_copy;
    }

    /**
     * Sets disallow_copy
     * @param bool $disallow_copy Disallow copying of this PDF.
     * @return $this
     */
    public function setDisallowCopy($disallow_copy)
    {

        $this->disallow_copy = $disallow_copy;
        return $this;
    }

    /**
     * Gets disallow_annotate
     * @return bool
     */
    public function getDisallowAnnotate()
    {
        return $this->disallow_annotate;
    }

    /**
     * Sets disallow_annotate
     * @param bool $disallow_annotate Disallow annotation of this PDF.
     * @return $this
     */
    public function setDisallowAnnotate($disallow_annotate)
    {

        $this->disallow_annotate = $disallow_annotate;
        return $this;
    }

    /**
     * Gets disallow_modify
     * @return bool
     */
    public function getDisallowModify()
    {
        return $this->disallow_modify;
    }

    /**
     * Sets disallow_modify
     * @param bool $disallow_modify Disallow modification of this PDF.
     * @return $this
     */
    public function setDisallowModify($disallow_modify)
    {

        $this->disallow_modify = $disallow_modify;
        return $this;
    }

    /**
     * Gets debug
     * @return bool
     */
    public function getDebug()
    {
        return $this->debug;
    }

    /**
     * Sets debug
     * @param bool $debug Enable Prince debug mode.
     * @return $this
     */
    public function setDebug($debug)
    {

        $this->debug = $debug;
        return $this;
    }

    /**
     * Gets input
     * @return string
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * Sets input
     * @param string $input Specify the input format.
     * @return $this
     */
    public function setInput($input)
    {
        $allowed_values = array("html", "xml", "auto");
        if (!in_array($input, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'input', must be one of 'html', 'xml', 'auto'");
        }
        $this->input = $input;
        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Sets version
     * @param string $version Specify a specific verison of PrinceXML to use.
     * @return $this
     */
    public function setVersion($version)
    {

        $this->version = $version;
        return $this;
    }

    /**
     * Gets javascript
     * @return bool
     */
    public function getJavascript()
    {
        return $this->javascript;
    }

    /**
     * Sets javascript
     * @param bool $javascript Enable PrinceXML JavaScript. DocRaptor JavaScript parsing is also available elsewhere.
     * @return $this
     */
    public function setJavascript($javascript)
    {

        $this->javascript = $javascript;
        return $this;
    }

    /**
     * Gets css_dpi
     * @return int
     */
    public function getCssDpi()
    {
        return $this->css_dpi;
    }

    /**
     * Sets css_dpi
     * @param int $css_dpi Set the DPI when rendering CSS. Defaults to 96 but can be set with Prince 9.0 and up.
     * @return $this
     */
    public function setCssDpi($css_dpi)
    {

        $this->css_dpi = $css_dpi;
        return $this;
    }

    /**
     * Gets profile
     * @return string
     */
    public function getProfile()
    {
        return $this->profile;
    }

    /**
     * Sets profile
     * @param string $profile In Prince 9.0 and up you can set the PDF profile.
     * @return $this
     */
    public function setProfile($profile)
    {

        $this->profile = $profile;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DocRaptor\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DocRaptor\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
